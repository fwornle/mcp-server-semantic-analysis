[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-server-semantic-analysis"
version = "1.0.0"
description = "Semantic Analysis MCP Server with Graphite Framework - 7-Agent Multi-Agent System"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name = "Agentic Coding Team", email = "team@agentic.dev"}
]
keywords = ["mcp", "semantic-analysis", "ai", "multi-agent", "graphite"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core framework
    "grafi>=0.0.18",  # Graphite framework for multi-agent systems
    
    # LLM providers
    "anthropic>=0.25.0",  # Claude API
    "openai>=1.12.0",     # OpenAI API and custom endpoints
    
    # MCP server
    "mcp>=1.0.0",         # Model Context Protocol
    
    # HTTP server for CoPilot integration  
    "fastapi>=0.104.0",   # HTTP API framework
    "uvicorn>=0.24.0",    # ASGI server
    
    # Data processing and analysis
    "numpy>=1.24.0",      # Numerical computing
    "pandas>=2.0.0",      # Data manipulation
    "scikit-learn>=1.3.0", # Machine learning utilities
    
    # Text and similarity processing
    "sentence-transformers>=2.2.0",  # Embedding generation
    "faiss-cpu>=1.7.0",              # Similarity search
    
    # Web search capabilities
    "requests>=2.31.0",   # HTTP client
    "aiohttp>=3.8.0",     # Async HTTP client
    "beautifulsoup4>=4.12.0", # HTML parsing
    
    # File and data handling
    "pydantic>=2.5.0",    # Data validation
    "pydantic-settings>=2.1.0", # Settings management
    "python-dotenv>=1.0.0", # Environment variables
    
    # Logging and monitoring
    "structlog>=23.2.0",  # Structured logging
    "rich>=13.7.0",       # Rich terminal output
    
    # Development and testing
    "pytest>=7.4.0",      # Testing framework
    "pytest-asyncio>=0.21.0", # Async testing
    "black>=23.12.0",     # Code formatting
    "ruff>=0.1.8",        # Linting and formatting
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[project.scripts]
sal = "semantic_analysis.cli:main"
semantic-analysis-cli = "semantic_analysis.cli:advanced_main"

[project.urls]
Homepage = "https://github.com/agentic-coding/mcp-server-semantic-analysis"
Repository = "https://github.com/agentic-coding/mcp-server-semantic-analysis"
Issues = "https://github.com/agentic-coding/mcp-server-semantic-analysis/issues"
Documentation = "https://github.com/agentic-coding/mcp-server-semantic-analysis/docs"

[tool.setuptools.packages.find]
where = ["."]
include = ["semantic_analysis*", "agents*", "workflows*", "api*", "config*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=semantic_analysis",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
]
asyncio_mode = "auto"